{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-21T09:09:28.410Z",
    "end": "2024-07-21T09:09:37.209Z",
    "duration": 8799,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fa3c250a-e759-4219-b388-4e75a6e5ac74",
      "title": "",
      "fullFile": "C:\\Users\\Kevin Cai\\CBATest\\test\\petstore.test.js",
      "file": "\\test\\petstore.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
          "title": "Create Pet API Tests",
          "fullFile": "C:\\Users\\Kevin Cai\\CBATest\\test\\petstore.test.js",
          "file": "\\test\\petstore.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Create Pet API Tests\"",
              "fullTitle": "Create Pet API Tests \"before all\" hook in \"Create Pet API Tests\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running before hook');\n  // Dynamically import chai.expect\n  const chai = await import('chai');\n  expect = chai.expect;\n  global.expect = expect;\n// Load existing pets from pets.json if it exists, otherwise create a new one\nif (fs.existsSync(petsFile)) {\n    pets = JSON.parse(fs.readFileSync(petsFile, 'utf8'));\n} else {\n    fs.writeFileSync(petsFile, JSON.stringify([]));\n    pets = [];\n}",
              "err": {},
              "uuid": "b4a69192-2aac-47b7-bbc9-daaf3900f7cf",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Create Pet API Tests\"",
              "fullTitle": "Create Pet API Tests \"after all\" hook in \"Create Pet API Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running after hook');\n// Save pets to pets.json after tests\nfs.writeFileSync(petsFile, JSON.stringify(pets, null, 2));",
              "err": {},
              "uuid": "d265d2d4-e097-44ab-9f0a-cb7892dc14df",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a new pet with Post Method and validate the pet details",
              "fullTitle": "Create Pet API Tests should create a new pet with Post Method and validate the pet details",
              "timedOut": false,
              "duration": 1044,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should create a new pet (POST)');\nawait utils.createAndValidateNewPet(baseURL, apiKey, pets);\nfs.writeFileSync(petsFile, JSON.stringify(pets, null, 2));\nconsole.log('Test completed: should create a new pet (POST)');",
              "err": {},
              "uuid": "8334b468-65bf-45f9-b64b-43db688061c0",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the pet by ID with GET Method and validate the pet details",
              "fullTitle": "Create Pet API Tests should retrieve the pet by ID with GET Method and validate the pet details",
              "timedOut": false,
              "duration": 711,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should retrieve the pet by ID (GET)');\nconst petName = pets.find(pet => pet.name.includes('Doggie')).name;\nconsole.log(\"what is the petName \"+ petName);\nconst petId = pets.find(pet => pet.name === petName).id;\nawait utils.retrieveValidatrePetById(baseURL, apiKey, petId,petName);\nconsole.log('Test completed: should retrieve the pet by ID (GET)');",
              "err": {},
              "uuid": "0b381888-d836-4105-8413-fee6edf21573",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve pet available with GET Method and validate the status details",
              "fullTitle": "Create Pet API Tests should retrieve pet available with GET Method and validate the status details",
              "timedOut": false,
              "duration": 1226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should retrieve pet status (GET) and validate the status details');\nawait utils.findAndValidateStatus(baseURL, apiKey, petStatus[i]);\nconsole.log('Test completed: should retrieve the pet by ID (GET) and validate the status details');",
              "err": {},
              "uuid": "ce15f795-0aa7-4cba-9926-b7362e61c61c",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve pet pending with GET Method and validate the status details",
              "fullTitle": "Create Pet API Tests should retrieve pet pending with GET Method and validate the status details",
              "timedOut": false,
              "duration": 732,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should retrieve pet status (GET) and validate the status details');\nawait utils.findAndValidateStatus(baseURL, apiKey, petStatus[i]);\nconsole.log('Test completed: should retrieve the pet by ID (GET) and validate the status details');",
              "err": {},
              "uuid": "bb8d6ad8-1658-42b9-a78e-bba5c04440e0",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve pet sold with GET Method and validate the status details",
              "fullTitle": "Create Pet API Tests should retrieve pet sold with GET Method and validate the status details",
              "timedOut": false,
              "duration": 712,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should retrieve pet status (GET) and validate the status details');\nawait utils.findAndValidateStatus(baseURL, apiKey, petStatus[i]);\nconsole.log('Test completed: should retrieve the pet by ID (GET) and validate the status details');",
              "err": {},
              "uuid": "67d2f6dd-c124-4e1d-a85d-d330234b6238",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve pet undefined with GET Method and validate the status details",
              "fullTitle": "Create Pet API Tests should retrieve pet undefined with GET Method and validate the status details",
              "timedOut": false,
              "duration": 733,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should retrieve pet status (GET) and validate the status details');\nawait utils.findAndValidateStatus(baseURL, apiKey, petStatus[i]);\nconsole.log('Test completed: should retrieve the pet by ID (GET) and validate the status details');",
              "err": {},
              "uuid": "4236aec4-c5d4-4102-b17c-7cec3cbcb14d",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an existing pet with PUT Method and validate the pet details",
              "fullTitle": "Create Pet API Tests should update an existing pet with PUT Method and validate the pet details",
              "timedOut": false,
              "duration": 723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should update an existing pet (PUT)');\n// Pick a random pet from the pets array\nlet randomPetIndex = Math.floor(Math.random() * pets.length);\nlet pet = pets[randomPetIndex];\nconsole.log(\"what is the pet id \" + pet.id);\n// generate random values\nconst updatedPetData = utils.generateUpdatedPetData(pet, petStatus);\n// Update all fields and validate the fields values\nawait utils.updatePetAndValidate(baseURL, apiKey, updatedPetData,pets);\nconsole.log('Test completed: should update an existing pet (PUT)');",
              "err": {},
              "uuid": "5d32f0cb-2dfc-466f-aebd-1b107bfb0838",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an existing pet with form data and using POST Method and validate the pet details",
              "fullTitle": "Create Pet API Tests should update an existing pet with form data and using POST Method and validate the pet details",
              "timedOut": false,
              "duration": 724,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should update an existing pet with form data (POST)');\n// Pick a random pet from the pets array\nlet randomPetIndex = Math.floor(Math.random() * pets.length);\nlet pet = pets[randomPetIndex];\nconsole.log(\"what is the pet id \" + pet.id);\n// Generate random name and status\nconst newName = `Updated${utils.generateRandomName()}`;\nconst filteredStatus = petStatus.filter(status => status !== 'available');\nconst newStatus = filteredStatus[Math.floor(Math.random() * filteredStatus.length)];\nconsole.log(\"what is the new status \"+ newStatus);\nawait utils.updatePetWithFormData(baseURL, apiKey, pet.id, newName, newStatus,pets);\nconsole.log('Test completed: should update an existing pet with form data (POST)');",
              "err": {},
              "uuid": "f04866ef-203f-4ede-9a1c-eb5afc78267c",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should upload an image for an existing pet (POST)",
              "fullTitle": "Create Pet API Tests should upload an image for an existing pet (POST)",
              "timedOut": false,
              "duration": 1456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should upload an image for an existing pet (POST)');\nconst randomPetIndex = Math.floor(Math.random() * pets.length);\nconst pet = pets[randomPetIndex];\nconsole.log(\"what is the pet id \" + pet.id);\nawait utils.uploadPetImage(baseURL, apiKey, pet.id, imagePath);\nconsole.log('Test completed: should upload an image for an existing pet (POST)');",
              "err": {},
              "uuid": "06474f08-d33d-47d2-8d22-2a5a196dee4e",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an existing pet with DELETE Method and validate the deletion",
              "fullTitle": "Create Pet API Tests should delete an existing pet with DELETE Method and validate the deletion",
              "timedOut": false,
              "duration": 716,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Running test: should delete an existing pet (DELETE)');\n// Pick a random pet from the pets array\nconst randomPetIndex = Math.floor(Math.random() * pets.length);\nconst pet = pets[randomPetIndex];\nconsole.log(\"what is the pet id \" + pet.id);\nawait utils.deletePetAndValidate(baseURL, apiKey, pet.id, pets);\nconsole.log('Test completed: should delete an existing pet (DELETE)');",
              "err": {},
              "uuid": "3bccdc04-b800-4a30-aff7-8ab8a1cb1916",
              "parentUUID": "a3c615bd-b3d2-4e72-b42f-1c24b1cd7db2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8334b468-65bf-45f9-b64b-43db688061c0",
            "0b381888-d836-4105-8413-fee6edf21573",
            "ce15f795-0aa7-4cba-9926-b7362e61c61c",
            "bb8d6ad8-1658-42b9-a78e-bba5c04440e0",
            "67d2f6dd-c124-4e1d-a85d-d330234b6238",
            "4236aec4-c5d4-4102-b17c-7cec3cbcb14d",
            "5d32f0cb-2dfc-466f-aebd-1b107bfb0838",
            "f04866ef-203f-4ede-9a1c-eb5afc78267c",
            "06474f08-d33d-47d2-8d22-2a5a196dee4e",
            "3bccdc04-b800-4a30-aff7-8ab8a1cb1916"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8777,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "custom_report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "custom_reports",
        "reportFilename": "custom_report"
      },
      "version": "6.2.0"
    }
  }
}